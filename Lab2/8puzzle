import heapq

GOAL_STATE = (1, 2, 3, 4, 5, 6, 7, 8, 0)
GRID_SIZE = 3

class PuzzleNode:
    def __init__(self, state, parent=None, g=0, h=0):
        self.state = state
        self.parent = parent
        self.g = g  # Cost from the start node
        self.h = h  # Heuristic (Manhattan distance)
        self.f = self.g + self.h  # Total cost

    def __lt__(self, other):
        return self.f < other.f

def get_manhattan_distance(state):
    """Calculates the Manhattan distance heuristic."""
    distance = 0
    for i in range(GRID_SIZE * GRID_SIZE):
        if state[i] == 0:
            continue
        current_row, current_col = divmod(i, GRID_SIZE)
        goal_row, goal_col = divmod(state[i] - 1, GRID_SIZE)
        distance += abs(current_row - goal_row) + abs(current_col - goal_col)
    return distance

def get_neighbors(node):
    """Generates all valid neighboring states from a given node."""
    neighbors = []
    state_list = list(node.state)
    zero_index = state_list.index(0)
    zero_row, zero_col = divmod(zero_index, GRID_SIZE)
    moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # Up, Down, Left, Right

    for move_row, move_col in moves:
        new_row, new_col = zero_row + move_row, zero_col + move_col
        if 0 <= new_row < GRID_SIZE and 0 <= new_col < GRID_SIZE:
            new_index = new_row * GRID_SIZE + new_col
            new_state_list = state_list[:]
            new_state_list[zero_index], new_state_list[new_index] = new_state_list[new_index], new_state_list[zero_index]
            new_state = tuple(new_state_list)
            new_g = node.g + 1
            new_h = get_manhattan_distance(new_state)
            neighbors.append(PuzzleNode(new_state, node, new_g, new_h))
    return neighbors

def a_star_search(initial_state):
    """Solves the 8-puzzle using the A* algorithm."""
    open_set = []
    closed_set = set()
    initial_h = get_manhattan_distance(initial_state)
    root_node = PuzzleNode(initial_state, g=0, h=initial_h)
    heapq.heappush(open_set, root_node)

    while open_set:
        current_node = heapq.heappop(open_set)
        if current_node.state == GOAL_STATE:
            return reconstruct_path(current_node)
        closed_set.add(current_node.state)

        for neighbor in get_neighbors(current_node):
            if neighbor.state not in closed_set:
                heapq.heappush(open_set, neighbor)
    
    return None

def reconstruct_path(node):
    """Reconstructs the solution path."""
    path = []
    while node.parent:
        path.append(node.state)
        node = node.parent
    path.append(node.state)
    return path[::-1]

def print_solution(path):
    """Prints the solution path."""
    for i, state in enumerate(path):
        print(f"Step {i}:")
        for row in range(GRID_SIZE):
            print(state[row * GRID_SIZE : (row + 1) * GRID_SIZE])
        print("-" * 10)

if __name__ == "__main__":
    initial_puzzle = (8, 6, 7, 2, 5, 4, 3, 0, 1)
    solution_path = a_star_search(initial_puzzle)
    
    if solution_path:
        print_solution(solution_path)
    else:
        print("No solution found.")
